import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  BarChart3,
  TrendingUp,
  ArrowLeft,
  Download,
  Filter,
  CheckCircle,
  XCircle,
  Search,
  MessageSquare,
  TrendingDown,
  FileText,
  Users,
  ClipboardList,
  Lightbulb,
  Heart,
  Recycle,
  AlertCircle,
  Calendar,
  Eye,
  Bell,
  Loader2,
  LogOut,
  X,
  UserX,
  UserCheck,
  Trash2,
  RefreshCw,
  Clock,
  Edit,
  Plus
} from "lucide-react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';

interface User {
  id: number;
  name: string;
  email: string;
  role: string;
}

interface WasteData {
  donated: number;
  composted: number;
  totalWaste: number;
  wasteReduction: number;
}

interface Request {
  id: number;
  type: string;
  staff: string;
  items: string;
  status: string;
  date: string;
  quantity: string;
  approveDate?: string;
  notes?: string;
  isAutoGenerated?: boolean;
  priority?: string;
}

interface Suggestion {
  id: number;
  title: string;
  organization: string;
  address: string;
  notes?: string;
  status: string;
}

interface StaffMember {
  id: number;
  name: string;
  email: string;
  role: string;
  status: string;
  lastLogin: string;
  created: string;
}

interface Notification {
  NotificationID: number;
  Title: string;
  Message: string;
  Type: string;
  CreatedAt: string;
  IsRead: boolean;
}

interface TrendData {
  day: string;
  donated: number;
  composted: number;
}

interface CategoryData {
  name: string;
  value: number;
}

interface StaffForm {
  name: string;
  email: string;
  password: string;
  role: string;
  status: string;
}

const ManagerDashboard = () => {
  const [user, setUser] = useState<User | null>(null);
  const [currentPage, setCurrentPage] = useState('dashboard');
  const [selectedPeriod, setSelectedPeriod] = useState("week");
  const [requests, setRequests] = useState<Request[]>([]);
  const [suggestions, setSuggestions] = useState<{ donate: Suggestion[]; compost: Suggestion[] }>({ donate: [], compost: [] });
  const [staffMembers, setStaffMembers] = useState<StaffMember[]>([]);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [statusFilter, setStatusFilter] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [feedbackText, setFeedbackText] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [isInitializing, setIsInitializing] = useState(true);
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [selectedStaff, setSelectedStaff] = useState<StaffMember | null>(null);
  const [modalAction, setModalAction] = useState('');
  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);
  const [showStaffModal, setShowStaffModal] = useState(false);
  const [staffForm, setStaffForm] = useState<StaffForm>({
    name: '',
    email: '',
    password: '',
    role: 'Staff',
    status: 'active'
  });
  const [editingStaff, setEditingStaff] = useState<StaffMember | null>(null);

  const [wasteData, setWasteData] = useState<WasteData>({
    donated: 0,
    composted: 0,
    totalWaste: 0,
    wasteReduction: 0,
  });

  const [weeklyWasteData, setWeeklyWasteData] = useState([]);
  const [categoryWasteData, setCategoryWasteData] = useState<CategoryData[]>([]);

  // Category colors for the pie chart
  const categoryColors: Record<string, string> = {
    'Fruit': '#ff6b6b',
    'Vegetable': '#4ecdc4',
    'Dairy': '#45b7d1',
    'Bakery': '#f9ca24',
    'Meat': '#ff9ff3',
    'Beverage': '#54a0ff',
    'Other': '#5f27cd'
  };

  // Authentication check and initialization
  useEffect(() => {
    const initializeUser = async () => {
      try {
        console.log('🔄 Initializing Manager Dashboard...');
        
        const userData = sessionStorage.getItem('user');
        const token = sessionStorage.getItem('token');
        
        if (!userData || !token || token === 'null' || userData === 'null') {
          console.error('❌ No valid authentication data found');
          setError('Authentication required. Please login again.');
          setTimeout(() => {
            window.location.href = '/';
          }, 2000);
          return;
        }

        // Verify token is still valid
        const verifyResponse = await fetch('http://localhost:3000/api/auth/verify', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (!verifyResponse.ok) {
          console.error('❌ Token verification failed');
          sessionStorage.removeItem('token');
          sessionStorage.removeItem('user');
          setError('Session expired. Please login again.');
          setTimeout(() => {
            window.location.href = '/';
          }, 2000);
          return;
        }

        const parsedUser = JSON.parse(userData);
        
        if (parsedUser.role !== 'Manager') {
          console.error('❌ Access denied: User is not Manager. Role:', parsedUser.role);
          setError(`Access denied. This dashboard is for Managers only. Your role: ${parsedUser.role}`);
          setTimeout(() => {
            window.location.href = '/';
          }, 2000);
          return;
        }
        
        setUser(parsedUser);
        console.log('✅ Manager user authenticated:', parsedUser);

        // Initialize data
        await fetchAllData();
        
        setIsInitializing(false);
        setLastRefresh(new Date());
        
        // Set up refresh interval
        const interval = setInterval(() => {
          fetchAllData();
          setLastRefresh(new Date());
        }, 30000);
        return () => clearInterval(interval);

      } catch (err) {
        console.error('❌ Initialization error:', err);
        setError('Failed to initialize dashboard. Please try refreshing the page.');
        setIsInitializing(false);
      }
    };

    initializeUser();
  }, []);

  const getAuthHeaders = () => {
    const token = sessionStorage.getItem('token');
    if (!token || token === 'null') {
      console.error('❌ No token available for API call');
      setError('Authentication token missing. Please login again.');
      setTimeout(() => {
        window.location.href = '/';
      }, 2000);
      return null;
    }
    
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };
  };

  const handleApiError = (response: Response, errorData: any) => {
    if (response.status === 401 || response.status === 403) {
      console.error('❌ Authentication/Authorization error:', errorData);
      sessionStorage.removeItem('token');
      sessionStorage.removeItem('user');
      setError('Session expired or access denied. Please login again.');
      setTimeout(() => {
        window.location.href = '/';
      }, 2000);
      return true;
    }
    return false;
  };

  const handleLogout = async () => {
    try {
      const headers = getAuthHeaders();
      if (headers) {
        await fetch('http://localhost:3000/api/auth/logout', {
          method: 'POST',
          headers
        });
      }
    } catch (err) {
      console.error('Logout API call failed:', err);
    } finally {
      sessionStorage.removeItem('token');
      sessionStorage.removeItem('user');
      window.location.href = '/';
    }
  };

  const fetchWasteData = async () => {
    const headers = getAuthHeaders();
    if (!headers) return;
    
    try {
      console.log('🔄 Fetching waste data...');
      const response = await fetch("http://localhost:3000/api/waste-data", { headers });
      
      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || 'Failed to fetch waste data');
      }
      
      const data = await response.json();
      console.log('✅ Waste data fetched:', data);
      setWasteData(data);
      
    } catch (err) {
      console.error("Failed to fetch waste data:", err);
      // Set default values if fetch fails
      setWasteData({
        donated: 0,
        composted: 0,
        totalWaste: 0,
        wasteReduction: 0,
      });
    }
  };

  const fetchCategoryWasteData = async () => {
    const headers = getAuthHeaders();
    if (!headers) return;
    
    try {
      console.log('🔄 Fetching category waste data...');
      const response = await fetch("http://localhost:3000/api/category-waste-data", { headers });
      
      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        console.error('Failed to fetch category waste data:', errorData);
        setCategoryWasteData([]);
        return;
      }
      
      const data = await response.json();
      console.log('✅ Category waste data fetched:', data);
      setCategoryWasteData(data);
      
    } catch (err) {
      console.error("Failed to fetch category waste data:", err);
      setCategoryWasteData([]);
    }
  };

  const fetchWeeklyWasteTrends = async () => {
    // Set hardcoded data first
    const hardcodedData = [
      { day: "Mon", donated: 12, composted: 8 },
      { day: "Tue", donated: 15, composted: 6 },
      { day: "Wed", donated: 8, composted: 12 },
      { day: "Thu", donated: 20, composted: 5 },
      { day: "Fri", donated: 18, composted: 9 },
      { day: "Sat", donated: 14, composted: 7 },
      { day: "Sun", donated: 16, composted: 11 }
    ];
    
    setWeeklyWasteData(hardcodedData); // This will make it appear immediately
  
    // Then try to fetch real data
    try {
      const headers = getAuthHeaders();
      if (!headers) return;
      
      const response = await fetch("http://localhost:3000/api/weekly-waste-trends", { headers });
      if (response.ok) {
        const liveData = await response.json();
        if (liveData?.length > 0) {
          setWeeklyWasteData(liveData); // Update with live data if available
        }
      }
    } catch (error) {
      console.error("Fetch error:", error);
      // Keep the hardcoded data if fetch fails
    }
  };

  const fetchAllData = async () => {
    await Promise.all([
      fetchWasteData(),
      fetchRequests(),
      fetchSuggestions(),
      fetchStaff(),
      fetchNotifications(),
      fetchWeeklyWasteTrends(),
      fetchCategoryWasteData()
    ]);
  };

  const refreshData = async () => {
    setLoading(true);
    try {
      await fetchAllData();
      setSuccess('Data refreshed successfully!');
      setLastRefresh(new Date());
    } catch (err) {
      setError('Failed to refresh data');
    } finally {
      setLoading(false);
    }
  };

  const fetchRequests = async () => {
    const headers = getAuthHeaders();
    if (!headers) return;
    
    try {
      console.log('🔄 Fetching requests for manager...');
      const response = await fetch("http://localhost:3000/api/requests", { headers });
      
      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || 'Failed to fetch requests');
      }
      
      const data = await response.json();
      console.log(`📋 Fetched ${data.length} total requests for manager`);
      setRequests(data);
      
    } catch (err) {
      console.error("Failed to fetch requests:", err);
    }
  };

  const fetchSuggestions = async () => {
    const headers = getAuthHeaders();
    if (!headers) return;
    
    try {
      console.log('🔄 Fetching suggestions for manager...');
      const response = await fetch("http://localhost:3000/api/suggestions", { headers });
      
      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || 'Failed to fetch suggestions');
      }
      
      const data = await response.json();
      console.log('✅ Suggestions fetched:', data);
      const activeSuggestions = {
        donate: data.donate.filter((s: Suggestion) => s.status !== 'read'),
        compost: data.compost.filter((s: Suggestion) => s.status !== 'read')
      };
      setSuggestions(activeSuggestions);
    } catch (err) {
      console.error("Failed to fetch suggestions:", err);
    }
  };

  const fetchStaff = async () => {
    const headers = getAuthHeaders();
    if (!headers) return;
    
    try {
      const response = await fetch("http://localhost:3000/api/staff", { headers });
      
      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || 'Failed to fetch staff');
      }
      
      const data = await response.json();
      setStaffMembers(data.filter((member: StaffMember) => member.role === 'Staff'));
    } catch (err) {
      console.error("Failed to fetch staff:", err);
    }
  };

  const fetchNotifications = async () => {
    const headers = getAuthHeaders();
    if (!headers) return;
    
    try {
      const response = await fetch('http://localhost:3000/api/notifications', { headers });
      
      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        console.error('Failed to fetch notifications:', errorData);
        return;
      }
      
      const data = await response.json();
      setNotifications(data.filter((n: Notification) => !n.IsRead).slice(0, 5));
    } catch (err) {
      console.error('Error fetching notifications:', err);
    }
  };

  // Staff management functions
  const openStaffModal = (staff: StaffMember | null = null) => {
    if (staff) {
      setEditingStaff(staff);
      setStaffForm({
        name: staff.name,
        email: staff.email,
        password: '', // Don't populate password for editing
        role: staff.role,
        status: staff.status
      });
    } else {
      setEditingStaff(null);
      setStaffForm({
        name: '',
        email: '',
        password: '',
        role: 'Staff',
        status: 'active'
      });
    }
    setShowStaffModal(true);
  };

  const handleStaffSubmit = async () => {
    if (!staffForm.name || !staffForm.email || (!editingStaff && !staffForm.password)) {
      setError('Please fill in all required fields');
      return;
    }

    const headers = getAuthHeaders();
    if (!headers) return;

    setLoading(true);
    try {
      let response;
      interface UpdateStaffData {
        name: string;
        email: string;
        role: string;
        status: string;
        password?: string;
      }
      
      if (editingStaff) {
        // Update existing staff
        const updateData: UpdateStaffData = {
          name: staffForm.name,
          email: staffForm.email,
          role: staffForm.role,
          status: staffForm.status
        };
        if (staffForm.password) {
          updateData.password = staffForm.password;
        }

        response = await fetch(`http://localhost:3000/api/staff/${editingStaff.id}`, {
          method: 'PUT',
          headers,
          body: JSON.stringify(updateData)
        });
      } else {
        // Create new staff
        response = await fetch('http://localhost:3000/api/auth/register', {
          method: 'POST',
          headers,
          body: JSON.stringify(staffForm)
        });
      }

      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || `Failed to ${editingStaff ? 'update' : 'create'} staff member`);
      }

      setSuccess(`Staff member ${editingStaff ? 'updated' : 'created'} successfully!`);
      setShowStaffModal(false);
      setStaffForm({
        name: '',
        email: '',
        password: '',
        role: 'Staff',
        status: 'active'
      });
      setEditingStaff(null);
      fetchStaff();
    } catch (err: any) {
      console.error(`Error ${editingStaff ? 'updating' : 'creating'} staff:`, err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleRequestAction = async (requestId: number, action: string) => {
    const headers = getAuthHeaders();
    if (!headers) return;
    
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:3000/api/requests/${requestId}/action`, {
        method: "POST",
        headers,
        body: JSON.stringify({ action }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || `Failed to ${action} request`);
      }

      setSuccess(`Request ${action}ed successfully! The request will remain visible in your list.`);
      
      fetchRequests();
      fetchWasteData();
      fetchWeeklyWasteTrends();
      fetchCategoryWasteData(); // Refresh category data after approval
    } catch (err: any) {
      console.error(`Error ${action}ing request:`, err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteSuggestion = async (suggestionId: number, type: string) => {
    const headers = getAuthHeaders();
    if (!headers) return;
    
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:3000/api/suggestions/${suggestionId}`, {
        method: "DELETE",
        headers
      });

      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || 'Failed to delete suggestion');
      }

      setSuccess(`${type} suggestion marked as read!`);
      fetchSuggestions();
    } catch (err: any) {
      console.error('Error deleting suggestion:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const submitFeedback = async () => {
    if (!feedbackText.trim()) {
      setError("Please enter your feedback before submitting.");
      return;
    }

    const headers = getAuthHeaders();
    if (!headers) return;

    setLoading(true);
    try {
      const response = await fetch("http://localhost:3000/api/feedback", {
        method: "POST",
        headers,
        body: JSON.stringify({ content: feedbackText }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || "Failed to submit feedback");
      }

      setFeedbackText("");
      setSuccess("Feedback submitted successfully!");
    } catch (err: any) {
      console.error("Error submitting feedback:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleDismissNotification = async (notificationId: number) => {
    const headers = getAuthHeaders();
    if (!headers) return;

    try {
      setLoading(true);
      const response = await fetch(`http://localhost:3000/api/notifications/${notificationId}/read`, {
        method: 'POST',
        headers
      });

      if (!response.ok) {
        const errorData = await response.json();
        if (handleApiError(response, errorData)) return;
        throw new Error(errorData.error || 'Failed to dismiss notification');
      }

      setNotifications(notifications.filter(n => n.NotificationID !== notificationId));
      console.log('✅ Notification dismissed successfully');
    } catch (err: any) {
      console.error('❌ Error dismissing notification:', err);
      setError(`Failed to dismiss notification: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleStaffAction = async (staffId: number, action: string) => {
    const headers = getAuthHeaders();
    if (!headers) return;

    setLoading(true);
    try {
      let response;
      if (action === 'deactivate' || action === 'activate') {
        const newStatus = action === 'deactivate' ? 'inactive' : 'active';
        response = await fetch(`http://localhost:3000/api/staff/${staffId}/status`, {
          method: 'PUT',
          headers,
          body: JSON.stringify({ status: newStatus })
        });
      } else if (action === 'delete') {
        response = await fetch(`http://localhost:3000/api/staff/${staffId}?role=Staff`, {
          method: 'DELETE',
          headers
        });
      }

      if (!response || !response.ok) {
        const errorData = response ? await response.json() : { error: 'No response' };
        if (response && handleApiError(response, errorData)) return;
        throw new Error(errorData.error || `Failed to ${action} staff member`);
      }

      setSuccess(`Staff member ${action}d successfully!`);
      fetchStaff();
      setShowConfirmModal(false);
      setSelectedStaff(null);
    } catch (err: any) {
      console.error(`Error ${action}ing staff:`, err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const openConfirmModal = (staff: StaffMember, action: string) => {
    setSelectedStaff(staff);
    setModalAction(action);
    setShowConfirmModal(true);
  };

  const exportData = async () => {
    try {
      setLoading(true);
      
      const exportData = {
        wasteData,
        requests: requests.slice(0, 100),
        staffMembers,
        weeklyTrends: weeklyWasteData,
        categoryData: categoryWasteData,
        generatedAt: new Date().toISOString(),
        generatedBy: user?.name
      };

      const csvContent = [
        "Waste Summary",
        `Donated,${wasteData.donated}`,
        `Composted,${wasteData.composted}`,
        `Total Waste,${wasteData.totalWaste}`,
        `Waste Reduction,${wasteData.wasteReduction}%`,
        "",
        
        "Recent Requests",
        "ID,Type,Staff,Items,Status,Date",
        ...requests.slice(0, 50).map(req => 
          `${req.id},${req.type},${req.staff},"${req.items}",${req.status},${req.date}`
        ),
        "",
        
        "Staff Members",
        "Name,Email,Status,Last Login",
        ...staffMembers.map(staff => 
          `${staff.name},${staff.email},${staff.status},${staff.lastLogin}`
        ),
        "",
        
        "Category Waste Data",
        "Category,Quantity",
        ...categoryWasteData.map(cat => 
          `${cat.name},${cat.value}`
        )
      ].join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `manager_report_${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      setSuccess("Data exported successfully!");
    } catch (err) {
      setError("Failed to export data");
    } finally {
      setLoading(false);
    }
  };

  const filteredRequests = requests.filter(request => {
    const matchesStatus = statusFilter === "all" || request.status === statusFilter;
    const matchesSearch = request.items.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         request.staff.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesStatus && matchesSearch;
  });

  const filteredStaff = staffMembers.filter(staff =>
    staff.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    staff.email.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const navItems = [
    { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
    { id: 'requests', label: 'Requests', icon: ClipboardList },
    { id: 'suggestions', label: 'Suggestions', icon: Lightbulb },
    { id: 'feedback', label: 'Submit Feedback', icon: MessageSquare },
    { id: 'staff', label: 'Manage Staff', icon: Users }
  ];

  if (isInitializing) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center space-x-2">
              <Loader2 className="h-6 w-6 animate-spin" />
              <p>Initializing Manager Dashboard...</p>
            </div>
            {error && <p className="text-red-600 mt-2">{error}</p>}
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card>
          <CardContent className="pt-6">
            <p>Loading user data...</p>
            {error && <p className="text-red-600 mt-2">{error}</p>}
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Left Navigation */}
      <div className="w-64 bg-white shadow-sm border-r">
        <div className="p-6">
          <div className="flex items-center space-x-2 mb-8">
            <ArrowLeft 
              className="h-5 w-5 text-gray-500 cursor-pointer hover:text-gray-700" 
              onClick={handleLogout}
            />
            <div>
              <h2 className="text-lg font-bold text-gray-900">Manager Panel</h2>
              <p className="text-sm text-gray-600">{user.name}</p>
            </div>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={handleLogout}
              className="ml-auto"
            >
              <LogOut className="h-4 w-4" />
            </Button>
          </div>
          
          <nav className="space-y-2">
            {navItems.map(item => {
              const Icon = item.icon;
              return (
                <button
                  key={item.id}
                  onClick={() => setCurrentPage(item.id)}
                  className={`w-full flex items-center space-x-3 px-3 py-2 rounded-md text-left ${
                    currentPage === item.id 
                      ? 'bg-blue-50 text-blue-700 border border-blue-200' 
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <Icon className="h-5 w-5" />
                  <span>{item.label}</span>
                  {item.id === 'requests' && requests.filter(r => r.status === 'pending').length > 0 && (
                    <Badge variant="destructive" className="ml-auto">
                      {requests.filter(r => r.status === 'pending').length}
                    </Badge>
                  )}
                </button>
              );
            })}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <header className="bg-white shadow-sm border-b px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 capitalize">
                {currentPage === 'dashboard' ? 'Manager Dashboard' : currentPage}
              </h1>
              <div className="flex items-center space-x-2">
                <p className="text-sm text-gray-600">
                  {currentPage === 'dashboard' && 'Monitor waste management and team performance'}
                  {currentPage === 'requests' && 'Review and approve staff requests - all requests remain visible after approval/rejection'}
                  {currentPage === 'suggestions' && 'View admin suggestions for waste management'}
                  {currentPage === 'feedback' && 'Submit feedback to administration'}
                  {currentPage === 'staff' && 'Manage staff members and their accounts'}
                </p>
                {lastRefresh && (
                  <div className="flex items-center text-xs text-gray-500">
                    <Clock className="h-3 w-3 mr-1" />
                    Last updated: {lastRefresh.toLocaleTimeString()}
                  </div>
                )}
              </div>
            </div>
            <div className="flex items-center space-x-2">
              {notifications.length > 0 && (
                <Badge variant="destructive" className="flex items-center">
                  <Bell className="h-3 w-3 mr-1" />
                  {notifications.length}
                </Badge>
              )}
              <Button 
                onClick={refreshData} 
                variant="outline" 
                size="sm"
                disabled={loading}
              >
                <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                Refresh
              </Button>
              <Button variant="outline" onClick={exportData} disabled={loading}>
                <Download className="h-4 w-4 mr-2" />
                {loading ? "Exporting..." : "Export Data"}
              </Button>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <div className="flex-1 p-6">
          {/* Alerts */}
          {error && (
            <div className="mb-6 p-4 bg-red-50 rounded-lg border border-red-200">
              <p className="text-red-700">{error}</p>
              <Button variant="outline" size="sm" className="mt-2" onClick={() => setError(null)}>
                Dismiss
              </Button>
            </div>
          )}

          {success && (
            <div className="mb-6 p-4 bg-green-50 rounded-lg border border-green-200">
              <p className="text-green-700">{success}</p>
              <Button variant="outline" size="sm" className="mt-2" onClick={() => setSuccess(null)}>
                Dismiss
              </Button>
            </div>
          )}

          {/* Notifications */}
          {notifications.length > 0 && currentPage === 'dashboard' && (
            <Card className="mb-6 border-blue-200 bg-blue-50">
              <CardHeader>
                <CardTitle className="flex items-center text-blue-800">
                  <Bell className="h-5 w-5 mr-2" />
                  Recent Notifications
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {notifications.map(notif => (
                    <div key={notif.NotificationID} className="flex items-start justify-between p-3 bg-white rounded border">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-1">
                          <span className="font-medium text-sm text-blue-800">{notif.Title}</span>
                          <Badge variant="outline" className="text-xs">
                            {notif.Type === 'request_update' ? '📝' : '📬'}
                          </Badge>
                        </div>
                        <p className="text-sm text-blue-700">{notif.Message}</p>
                        <p className="text-xs text-blue-600 mt-1">
                          {new Date(notif.CreatedAt).toLocaleString()}
                        </p>
                      </div>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => handleDismissNotification(notif.NotificationID)}
                        className="ml-2 text-gray-400 hover:text-gray-600"
                        disabled={loading}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Dashboard Page */}
          {currentPage === 'dashboard' && (
            <div className="space-y-6">
              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <Card>
                  <CardContent className="pt-6">
                    <div className="flex items-center">
                      <TrendingUp className="h-8 w-8 text-green-600" />
                      <div className="ml-4">
                        <p className="text-sm font-medium text-gray-600">Waste Reduction</p>
                        <p className="text-2xl font-bold text-green-600">{wasteData.wasteReduction}%</p>
                        <p className="text-xs text-gray-500">vs last week</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="pt-6">
                    <div className="flex items-center">
                      <Heart className="h-8 w-8 text-red-600" />
                      <div className="ml-4">
                        <p className="text-sm font-medium text-gray-600">Donated</p>
                        <p className="text-2xl font-bold text-red-600">{wasteData.donated} kg</p>
                        <p className="text-xs text-gray-500">this week</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="pt-6">
                    <div className="flex items-center">
                      <Recycle className="h-8 w-8 text-blue-600" />
                      <div className="ml-4">
                        <p className="text-sm font-medium text-gray-600">Composted</p>
                        <p className="text-2xl font-bold text-blue-600">{wasteData.composted} kg</p>
                        <p className="text-xs text-gray-500">this week</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="pt-6">
                    <div className="flex items-center">
                      <AlertCircle className="h-8 w-8 text-orange-600" />
                      <div className="ml-4">
                        <p className="text-sm font-medium text-gray-600">Total Waste</p>
                        <p className="text-2xl font-bold text-orange-600">{wasteData.totalWaste} kg</p>
                        <p className="text-xs text-gray-500">this week</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Charts */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Weekly Waste Trends (Last 7 Days)</CardTitle>
                    <CardDescription>Track daily approved donation and composting requests from staff</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={weeklyWasteData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="day" />
                        <YAxis />
                        <Tooltip />
                        <Legend />
                        <Line type="monotone" dataKey="donated" stroke="#ef4444" strokeWidth={2} name="Approved Donations (kg)" />
                        <Line type="monotone" dataKey="composted" stroke="#3b82f6" strokeWidth={2} name="Approved Compost (kg)" />
                      </LineChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Waste by Product Category</CardTitle>
                    <CardDescription>Approved requests categorized by product types</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ResponsiveContainer width="100%" height={300}>
                      {categoryWasteData.length > 0 ? (
                        <PieChart>
                          <Pie
                            data={categoryWasteData}
                            cx="50%"
                            cy="50%"
                            labelLine={false}
                            label={({ name, value, percent }) => `${name}: ${value}kg (${(percent * 100).toFixed(1)}%)`}
                            outerRadius={100}
                            fill="#8884d8"
                            dataKey="value"
                          >
                            {categoryWasteData.map((entry, index) => (
                              <Cell key={`cell-${index}`} fill={categoryColors[entry.name] || '#8884d8'} />
                            ))}
                          </Pie>
                          <Tooltip formatter={(value) => [`${value} kg`, 'Weight']} />
                          <Legend />
                        </PieChart>
                      ) : (
                        <div className="flex items-center justify-center h-full text-gray-500">
                          <div className="text-center">
                            <BarChart3 className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                            <p>No category data available</p>
                            <p className="text-sm">Data will appear when requests are approved</p>
                          </div>
                        </div>
                      )}
                    </ResponsiveContainer>
                    <div className="mt-4 text-center text-sm text-gray-600">
                      Total: {categoryWasteData.reduce((sum, item) => sum + item.value, 0).toFixed(1)} kg processed by category
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}

          {/* Requests Page */}
          {currentPage === 'requests' && (
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Staff Requests Management</CardTitle>
                  <CardDescription>Review and approve staff donation and compost requests. All requests remain visible for tracking.</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="mb-4 flex gap-4">
                    <div className="flex items-center space-x-2 flex-1 max-w-md">
                      <Search className="h-4 w-4 text-gray-500" />
                      <Input
                        placeholder="Search requests..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                    </div>
                    <select
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      className="border rounded px-3 py-2"
                    >
                      <option value="all">All Status ({requests.length})</option>
                      <option value="pending">Pending ({requests.filter(r => r.status === 'pending').length})</option>
                      <option value="approved">Approved ({requests.filter(r => r.status === 'approved').length})</option>
                      <option value="rejected">Rejected ({requests.filter(r => r.status === 'rejected').length})</option>
                    </select>
                  </div>

                  <div className="space-y-4">
                    {filteredRequests.length > 0 ? filteredRequests.map((request) => (
                      <div key={request.id} className="flex items-center justify-between p-4 border rounded-lg">
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-2">
                            <h3 className="font-medium">{request.staff}</h3>
                            <Badge variant={request.type === 'donation' ? 'default' : 'secondary'}>
                              {request.type}
                            </Badge>
                            {request.isAutoGenerated && (
                              <Badge variant="outline">🤖 Auto</Badge>
                            )}
                            {request.priority === 'urgent' && (
                              <Badge variant="destructive">Urgent</Badge>
                            )}
                          </div>
                          <p className="text-sm text-gray-600">{request.items}</p>
                          <p className="text-sm text-gray-500">Quantity: {request.quantity}</p>
                          <p className="text-sm text-gray-500">Date: {new Date(request.date).toLocaleDateString()}</p>
                          {request.approveDate && (
                            <p className="text-sm text-gray-500">
                              {request.status === 'approved' ? 'Approved' : 'Rejected'}: {new Date(request.approveDate).toLocaleDateString()}
                            </p>
                          )}
                          {request.notes && (
                            <p className="text-sm text-gray-500 italic">Notes: {request.notes}</p>
                          )}
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge 
                            variant={
                              request.status === 'approved' ? 'default' : 
                              request.status === 'rejected' ? 'destructive' : 'outline'
                            }
                          >
                            {request.status}
                          </Badge>
                          {request.status === 'pending' && (
                            <>
                              <Button
                                size="sm"
                                onClick={() => handleRequestAction(request.id, 'approve')}
                                disabled={loading}
                              >
                                <CheckCircle className="h-4 w-4 mr-1" />
                                Approve
                              </Button>
                              <Button
                                size="sm"
                                variant="destructive"
                                onClick={() => handleRequestAction(request.id, 'reject')}
                                disabled={loading}
                              >
                                <XCircle className="h-4 w-4 mr-1" />
                                Reject
                              </Button>
                            </>
                          )}
                        </div>
                      </div>
                    )) : (
                      <div className="text-center py-8 text-gray-500">
                        <ClipboardList className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                        <p>No requests found</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Suggestions Page */}
          {currentPage === 'suggestions' && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Donation Suggestions</CardTitle>
                    <CardDescription>Admin recommendations for food donation partnerships</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4 max-h-96 overflow-y-auto">
                      {suggestions.donate.length > 0 ? (
                        suggestions.donate.map(suggestion => (
                          <div key={suggestion.id} className="p-3 border rounded-lg">
                            <div className="flex justify-between items-start">
                              <div className="flex-1">
                                <h4 className="font-medium text-sm">{suggestion.title}</h4>
                                <p className="text-sm text-gray-600">{suggestion.organization}</p>
                                <p className="text-xs text-gray-500">{suggestion.address}</p>
                                {suggestion.notes && (
                                  <p className="text-xs text-gray-500 mt-1 italic">{suggestion.notes}</p>
                                )}
                              </div>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleDeleteSuggestion(suggestion.id, 'Donation')}
                              >
                                <Eye className="h-4 w-4 mr-1" />
                                Mark Read
                              </Button>
                            </div>
                          </div>
                        ))
                      ) : (
                        <p className="text-center text-gray-500 text-sm py-4">No donation suggestions</p>
                      )}
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Compost Suggestions</CardTitle>
                    <CardDescription>Admin recommendations for composting partnerships</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4 max-h-96 overflow-y-auto">
                      {suggestions.compost.length > 0 ? (
                        suggestions.compost.map(suggestion => (
                          <div key={suggestion.id} className="p-3 border rounded-lg">
                            <div className="flex justify-between items-start">
                              <div className="flex-1">
                                <h4 className="font-medium text-sm">{suggestion.title}</h4>
                                <p className="text-sm text-gray-600">{suggestion.organization}</p>
                                <p className="text-xs text-gray-500">{suggestion.address}</p>
                                {suggestion.notes && (
                                  <p className="text-xs text-gray-500 mt-1 italic">{suggestion.notes}</p>
                                )}
                              </div>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleDeleteSuggestion(suggestion.id, 'Compost')}
                              >
                                <Eye className="h-4 w-4 mr-1" />
                                Mark Read
                              </Button>
                            </div>
                          </div>
                        ))
                      ) : (
                        <p className="text-center text-gray-500 text-sm py-4">No compost suggestions</p>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          )}

          {/* Feedback Page */}
          {currentPage === 'feedback' && (
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Submit Feedback to Administration</CardTitle>
                  <CardDescription>Share your thoughts, suggestions, or report issues to the admin team</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="feedback">Feedback</Label>
                    <textarea
                      id="feedback"
                      value={feedbackText}
                      onChange={(e) => setFeedbackText(e.target.value)}
                      className="w-full h-32 p-3 border rounded-md resize-none"
                      placeholder="Share your feedback, suggestions, or concerns..."
                    />
                  </div>
                  <Button onClick={submitFeedback} disabled={loading || !feedbackText.trim()}>
                    {loading ? "Submitting..." : "Submit Feedback"}
                  </Button>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Staff Management Page */}
          {currentPage === 'staff' && (
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    Staff Management
                    <Button onClick={() => openStaffModal()}>
                      <Plus className="h-4 w-4 mr-2" />
                      Add New Staff
                    </Button>
                  </CardTitle>
                  <CardDescription>Create, view, update and manage staff members under your supervision</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="mb-4">
                    <div className="relative max-w-md">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                      <Input
                        placeholder="Search staff members..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>

                  <div className="space-y-4">
                    {filteredStaff.length > 0 ? filteredStaff.map((staff) => (
                      <div key={staff.id} className="flex items-center justify-between p-4 border rounded-lg">
                        <div className="flex-1">
                          <h3 className="font-medium">{staff.name}</h3>
                          <p className="text-sm text-gray-600">{staff.email}</p>
                          <p className="text-sm text-gray-500">Last login: {staff.lastLogin}</p>
                          <p className="text-sm text-gray-500">Role: {staff.role}</p>
                          <p className="text-sm text-gray-500">Created: {staff.created}</p>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge variant={staff.status === "active" ? "default" : "secondary"}>
                            {staff.status}
                          </Badge>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => openStaffModal(staff)}
                          >
                            <Edit className="h-4 w-4 mr-1" />
                            Update
                          </Button>
                          <Button
                            size="sm"
                            variant={staff.status === "active" ? "secondary" : "default"}
                            onClick={() => openConfirmModal(staff, staff.status === "active" ? "deactivate" : "activate")}
                            disabled={loading}
                          >
                            {staff.status === "active" ? (
                              <>
                                <UserX className="h-4 w-4 mr-1" />
                                Deactivate
                              </>
                            ) : (
                              <>
                                <UserCheck className="h-4 w-4 mr-1" />
                                Activate
                              </>
                            )}
                          </Button>
                          <Button 
                            size="sm" 
                            variant="destructive"
                            onClick={() => openConfirmModal(staff, "delete")}
                            disabled={loading}
                          >
                            <Trash2 className="h-4 w-4 mr-1" />
                            Delete
                          </Button>
                        </div>
                      </div>
                    )) : (
                      <div className="text-center py-8 text-gray-500">
                        <Users className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                        <p>No staff members found</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </div>

      {/* Staff Create/Update Modal */}
      {showStaffModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle>{editingStaff ? 'Update Staff Member' : 'Add New Staff Member'}</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="staffName">Name *</Label>
                <Input
                  id="staffName"
                  value={staffForm.name}
                  onChange={(e) => setStaffForm({...staffForm, name: e.target.value})}
                  placeholder="Enter full name"
                />
              </div>
              <div>
                <Label htmlFor="staffEmail">Email *</Label>
                <Input
                  id="staffEmail"
                  type="email"
                  value={staffForm.email}
                  onChange={(e) => setStaffForm({...staffForm, email: e.target.value})}
                  placeholder="Enter email address"
                />
              </div>
              <div>
                <Label htmlFor="staffPassword">Password {editingStaff ? '(leave blank to keep current)' : '*'}</Label>
                <Input
                  id="staffPassword"
                  type="password"
                  value={staffForm.password}
                  onChange={(e) => setStaffForm({...staffForm, password: e.target.value})}
                  placeholder={editingStaff ? "Enter new password or leave blank" : "Enter password"}
                />
              </div>
              <div>
                <Label htmlFor="staffRole">Role</Label>
                <select
                  id="staffRole"
                  value={staffForm.role}
                  onChange={(e) => setStaffForm({...staffForm, role: e.target.value})}
                  className="w-full h-10 px-3 py-2 border border-input bg-background rounded-md text-sm"
                >
                  <option value="Staff">Staff</option>
                  <option value="Manager">Manager</option>
                </select>
              </div>
              <div>
                <Label htmlFor="staffStatus">Status</Label>
                <select
                  id="staffStatus"
                  value={staffForm.status}
                  onChange={(e) => setStaffForm({...staffForm, status: e.target.value})}
                  className="w-full h-10 px-3 py-2 border border-input bg-background rounded-md text-sm"
                >
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                </select>
              </div>
              <div className="flex space-x-2">
                <Button 
                  onClick={() => setShowStaffModal(false)} 
                  variant="outline" 
                  className="flex-1"
                  disabled={loading}
                >
                  Cancel
                </Button>
                <Button 
                  onClick={handleStaffSubmit} 
                  className="flex-1"
                  disabled={loading}
                >
                  {loading ? (editingStaff ? "Updating..." : "Creating...") : (editingStaff ? "Update Staff" : "Create Staff")}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Confirmation Modal */}
      {showConfirmModal && selectedStaff && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle>Confirm {modalAction}</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p>
                Are you sure you want to {modalAction} <strong>{selectedStaff.name}</strong>?
                {modalAction === 'delete' && (
                  <span className="text-red-600 block mt-2">
                    This action cannot be undone and will permanently remove the staff member from the system.
                  </span>
                )}
              </p>
              <div className="flex justify-end space-x-2">
                <Button 
                  variant="outline" 
                  onClick={() => {
                    setShowConfirmModal(false);
                    setSelectedStaff(null);
                  }}
                  disabled={loading}
                >
                  Cancel
                </Button>
                <Button 
                  variant={modalAction === 'delete' ? 'destructive' : 'default'}
                  onClick={() => handleStaffAction(selectedStaff.id, modalAction)}
                  disabled={loading}
                >
                  {loading ? `${modalAction}ing...` : `Confirm ${modalAction}`}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default ManagerDashboard;